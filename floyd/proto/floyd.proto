package floyd;

// Raft RPC is the RPC presented in raft paper
// User cmd RPC the cmd build upon the raft protocol

enum Type {
  // User cmd
  kRead = 0;
  kWrite = 1;
  kDelete = 3;
  kTryLock = 5;
  kUnLock = 6;
  kAddServer = 11;
  kRemoveServer = 12;
  kGetAllServers = 13;

  // Raft RPC
  kRequestVote = 8;
  kAppendEntries = 9;
  kServerStatus = 10;
}

enum StatusCode {
  kOk = 0;
  kNotFound = 1;
  kError = 2;
  kLocked = 3;
}

message CmdResponse {
  required Type type = 1;
  optional StatusCode code = 2;

  message RequestVoteResponse {
    required uint64 term = 1;
    required bool vote_granted = 2;
  }
  optional RequestVoteResponse request_vote_res = 3;

  message AppendEntriesResponse {
    required uint64 term = 1;
    required bool success = 2;
    optional uint64 last_log_index = 3;
  }
  optional AppendEntriesResponse append_entries_res = 4;

  optional bytes msg = 5;

  message KvResponse {
    optional bytes value = 1;
  }
  optional KvResponse kv_response = 6;

  message ServerStatus {
    required uint64 term = 1;
    required uint64 commit_index = 2;
    required bytes role = 3;
    optional bytes leader_ip = 4;
    optional int32 leader_port = 5;
    optional bytes voted_for_ip = 6;
    optional int32 voted_for_port = 7;
    optional uint64 last_log_term = 8;
    optional uint64 last_log_index = 9;
    optional uint64 last_applied = 10;
  }
  optional ServerStatus server_status = 7;

  optional Membership all_servers = 8;
}

/*
 * protos used for membership
 * Membership record current membership config of floyd
 */
message Membership {
  repeated bytes nodes = 1;
}



