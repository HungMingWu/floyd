// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: floyd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "floyd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace floyd {

namespace {

const ::google::protobuf::Descriptor* CmdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdResponse_RequestVoteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdResponse_RequestVoteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdResponse_AppendEntriesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdResponse_AppendEntriesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdResponse_KvResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdResponse_KvResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdResponse_ServerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdResponse_ServerStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Membership_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Membership_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StatusCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_floyd_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_floyd_2eproto() {
  protobuf_AddDesc_floyd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "floyd.proto");
  GOOGLE_CHECK(file != NULL);
  CmdResponse_descriptor_ = file->message_type(0);
  static const int CmdResponse_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, request_vote_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, append_entries_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, kv_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, server_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, all_servers_),
  };
  CmdResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdResponse_descriptor_,
      CmdResponse::default_instance_,
      CmdResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CmdResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, _internal_metadata_),
      -1);
  CmdResponse_RequestVoteResponse_descriptor_ = CmdResponse_descriptor_->nested_type(0);
  static const int CmdResponse_RequestVoteResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_RequestVoteResponse, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_RequestVoteResponse, vote_granted_),
  };
  CmdResponse_RequestVoteResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdResponse_RequestVoteResponse_descriptor_,
      CmdResponse_RequestVoteResponse::default_instance_,
      CmdResponse_RequestVoteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_RequestVoteResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CmdResponse_RequestVoteResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_RequestVoteResponse, _internal_metadata_),
      -1);
  CmdResponse_AppendEntriesResponse_descriptor_ = CmdResponse_descriptor_->nested_type(1);
  static const int CmdResponse_AppendEntriesResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_AppendEntriesResponse, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_AppendEntriesResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_AppendEntriesResponse, last_log_index_),
  };
  CmdResponse_AppendEntriesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdResponse_AppendEntriesResponse_descriptor_,
      CmdResponse_AppendEntriesResponse::default_instance_,
      CmdResponse_AppendEntriesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_AppendEntriesResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CmdResponse_AppendEntriesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_AppendEntriesResponse, _internal_metadata_),
      -1);
  CmdResponse_KvResponse_descriptor_ = CmdResponse_descriptor_->nested_type(2);
  static const int CmdResponse_KvResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_KvResponse, value_),
  };
  CmdResponse_KvResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdResponse_KvResponse_descriptor_,
      CmdResponse_KvResponse::default_instance_,
      CmdResponse_KvResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_KvResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(CmdResponse_KvResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_KvResponse, _internal_metadata_),
      -1);
  CmdResponse_ServerStatus_descriptor_ = CmdResponse_descriptor_->nested_type(3);
  static const int CmdResponse_ServerStatus_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, commit_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, leader_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, leader_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, voted_for_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, voted_for_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, last_log_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, last_log_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, last_applied_),
  };
  CmdResponse_ServerStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdResponse_ServerStatus_descriptor_,
      CmdResponse_ServerStatus::default_instance_,
      CmdResponse_ServerStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(CmdResponse_ServerStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse_ServerStatus, _internal_metadata_),
      -1);
  Membership_descriptor_ = file->message_type(1);
  static const int Membership_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Membership, nodes_),
  };
  Membership_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Membership_descriptor_,
      Membership::default_instance_,
      Membership_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Membership, _has_bits_[0]),
      -1,
      -1,
      sizeof(Membership),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Membership, _internal_metadata_),
      -1);
  Type_descriptor_ = file->enum_type(0);
  StatusCode_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_floyd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdResponse_descriptor_, &CmdResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdResponse_RequestVoteResponse_descriptor_, &CmdResponse_RequestVoteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdResponse_AppendEntriesResponse_descriptor_, &CmdResponse_AppendEntriesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdResponse_KvResponse_descriptor_, &CmdResponse_KvResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdResponse_ServerStatus_descriptor_, &CmdResponse_ServerStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Membership_descriptor_, &Membership::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_floyd_2eproto() {
  delete CmdResponse::default_instance_;
  delete CmdResponse_reflection_;
  delete CmdResponse_RequestVoteResponse::default_instance_;
  delete CmdResponse_RequestVoteResponse_reflection_;
  delete CmdResponse_AppendEntriesResponse::default_instance_;
  delete CmdResponse_AppendEntriesResponse_reflection_;
  delete CmdResponse_KvResponse::default_instance_;
  delete CmdResponse_KvResponse_reflection_;
  delete CmdResponse_ServerStatus::default_instance_;
  delete CmdResponse_ServerStatus_reflection_;
  delete Membership::default_instance_;
  delete Membership_reflection_;
}

void protobuf_AddDesc_floyd_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_floyd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013floyd.proto\022\005floyd\"\370\005\n\013CmdResponse\022\031\n\004"
    "type\030\001 \002(\0162\013.floyd.Type\022\037\n\004code\030\002 \001(\0162\021."
    "floyd.StatusCode\022@\n\020request_vote_res\030\003 \001"
    "(\0132&.floyd.CmdResponse.RequestVoteRespon"
    "se\022D\n\022append_entries_res\030\004 \001(\0132(.floyd.C"
    "mdResponse.AppendEntriesResponse\022\013\n\003msg\030"
    "\005 \001(\014\0222\n\013kv_response\030\006 \001(\0132\035.floyd.CmdRe"
    "sponse.KvResponse\0226\n\rserver_status\030\007 \001(\013"
    "2\037.floyd.CmdResponse.ServerStatus\022&\n\013all"
    "_servers\030\010 \001(\0132\021.floyd.Membership\0329\n\023Req"
    "uestVoteResponse\022\014\n\004term\030\001 \002(\004\022\024\n\014vote_g"
    "ranted\030\002 \002(\010\032N\n\025AppendEntriesResponse\022\014\n"
    "\004term\030\001 \002(\004\022\017\n\007success\030\002 \002(\010\022\026\n\016last_log"
    "_index\030\003 \001(\004\032\033\n\nKvResponse\022\r\n\005value\030\001 \001("
    "\014\032\333\001\n\014ServerStatus\022\014\n\004term\030\001 \002(\004\022\024\n\014comm"
    "it_index\030\002 \002(\004\022\014\n\004role\030\003 \002(\014\022\021\n\tleader_i"
    "p\030\004 \001(\014\022\023\n\013leader_port\030\005 \001(\005\022\024\n\014voted_fo"
    "r_ip\030\006 \001(\014\022\026\n\016voted_for_port\030\007 \001(\005\022\025\n\rla"
    "st_log_term\030\010 \001(\004\022\026\n\016last_log_index\030\t \001("
    "\004\022\024\n\014last_applied\030\n \001(\004\"\033\n\nMembership\022\r\n"
    "\005nodes\030\001 \003(\014*\265\001\n\004Type\022\t\n\005kRead\020\000\022\n\n\006kWri"
    "te\020\001\022\013\n\007kDelete\020\003\022\014\n\010kTryLock\020\005\022\013\n\007kUnLo"
    "ck\020\006\022\016\n\nkAddServer\020\013\022\021\n\rkRemoveServer\020\014\022"
    "\022\n\016kGetAllServers\020\r\022\020\n\014kRequestVote\020\010\022\022\n"
    "\016kAppendEntries\020\t\022\021\n\rkServerStatus\020\n*=\n\n"
    "StatusCode\022\007\n\003kOk\020\000\022\r\n\tkNotFound\020\001\022\n\n\006kE"
    "rror\020\002\022\013\n\007kLocked\020\003", 1059);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "floyd.proto", &protobuf_RegisterTypes);
  CmdResponse::default_instance_ = new CmdResponse();
  CmdResponse_RequestVoteResponse::default_instance_ = new CmdResponse_RequestVoteResponse();
  CmdResponse_AppendEntriesResponse::default_instance_ = new CmdResponse_AppendEntriesResponse();
  CmdResponse_KvResponse::default_instance_ = new CmdResponse_KvResponse();
  CmdResponse_ServerStatus::default_instance_ = new CmdResponse_ServerStatus();
  Membership::default_instance_ = new Membership();
  CmdResponse::default_instance_->InitAsDefaultInstance();
  CmdResponse_RequestVoteResponse::default_instance_->InitAsDefaultInstance();
  CmdResponse_AppendEntriesResponse::default_instance_->InitAsDefaultInstance();
  CmdResponse_KvResponse::default_instance_->InitAsDefaultInstance();
  CmdResponse_ServerStatus::default_instance_->InitAsDefaultInstance();
  Membership::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_floyd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_floyd_2eproto {
  StaticDescriptorInitializer_floyd_2eproto() {
    protobuf_AddDesc_floyd_2eproto();
  }
} static_descriptor_initializer_floyd_2eproto_;
const ::google::protobuf::EnumDescriptor* Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Type_descriptor_;
}
bool Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StatusCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusCode_descriptor_;
}
bool StatusCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdResponse_RequestVoteResponse::kTermFieldNumber;
const int CmdResponse_RequestVoteResponse::kVoteGrantedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdResponse_RequestVoteResponse::CmdResponse_RequestVoteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:floyd.CmdResponse.RequestVoteResponse)
}

void CmdResponse_RequestVoteResponse::InitAsDefaultInstance() {
}

CmdResponse_RequestVoteResponse::CmdResponse_RequestVoteResponse(const CmdResponse_RequestVoteResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:floyd.CmdResponse.RequestVoteResponse)
}

void CmdResponse_RequestVoteResponse::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  vote_granted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdResponse_RequestVoteResponse::~CmdResponse_RequestVoteResponse() {
  // @@protoc_insertion_point(destructor:floyd.CmdResponse.RequestVoteResponse)
  SharedDtor();
}

void CmdResponse_RequestVoteResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdResponse_RequestVoteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdResponse_RequestVoteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdResponse_RequestVoteResponse_descriptor_;
}

const CmdResponse_RequestVoteResponse& CmdResponse_RequestVoteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_floyd_2eproto();
  return *default_instance_;
}

CmdResponse_RequestVoteResponse* CmdResponse_RequestVoteResponse::default_instance_ = NULL;

CmdResponse_RequestVoteResponse* CmdResponse_RequestVoteResponse::New(::google::protobuf::Arena* arena) const {
  CmdResponse_RequestVoteResponse* n = new CmdResponse_RequestVoteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdResponse_RequestVoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:floyd.CmdResponse.RequestVoteResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CmdResponse_RequestVoteResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CmdResponse_RequestVoteResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(term_, vote_granted_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdResponse_RequestVoteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:floyd.CmdResponse.RequestVoteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_vote_granted;
        break;
      }

      // required bool vote_granted = 2;
      case 2: {
        if (tag == 16) {
         parse_vote_granted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vote_granted_)));
          set_has_vote_granted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:floyd.CmdResponse.RequestVoteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:floyd.CmdResponse.RequestVoteResponse)
  return false;
#undef DO_
}

void CmdResponse_RequestVoteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:floyd.CmdResponse.RequestVoteResponse)
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required bool vote_granted = 2;
  if (has_vote_granted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->vote_granted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:floyd.CmdResponse.RequestVoteResponse)
}

::google::protobuf::uint8* CmdResponse_RequestVoteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:floyd.CmdResponse.RequestVoteResponse)
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required bool vote_granted = 2;
  if (has_vote_granted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->vote_granted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:floyd.CmdResponse.RequestVoteResponse)
  return target;
}

int CmdResponse_RequestVoteResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:floyd.CmdResponse.RequestVoteResponse)
  int total_size = 0;

  if (has_term()) {
    // required uint64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  if (has_vote_granted()) {
    // required bool vote_granted = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
int CmdResponse_RequestVoteResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:floyd.CmdResponse.RequestVoteResponse)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());

    // required bool vote_granted = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdResponse_RequestVoteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:floyd.CmdResponse.RequestVoteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CmdResponse_RequestVoteResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdResponse_RequestVoteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:floyd.CmdResponse.RequestVoteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:floyd.CmdResponse.RequestVoteResponse)
    MergeFrom(*source);
  }
}

void CmdResponse_RequestVoteResponse::MergeFrom(const CmdResponse_RequestVoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:floyd.CmdResponse.RequestVoteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_vote_granted()) {
      set_vote_granted(from.vote_granted());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CmdResponse_RequestVoteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:floyd.CmdResponse.RequestVoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResponse_RequestVoteResponse::CopyFrom(const CmdResponse_RequestVoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:floyd.CmdResponse.RequestVoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdResponse_RequestVoteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CmdResponse_RequestVoteResponse::Swap(CmdResponse_RequestVoteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdResponse_RequestVoteResponse::InternalSwap(CmdResponse_RequestVoteResponse* other) {
  std::swap(term_, other->term_);
  std::swap(vote_granted_, other->vote_granted_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdResponse_RequestVoteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdResponse_RequestVoteResponse_descriptor_;
  metadata.reflection = CmdResponse_RequestVoteResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdResponse_AppendEntriesResponse::kTermFieldNumber;
const int CmdResponse_AppendEntriesResponse::kSuccessFieldNumber;
const int CmdResponse_AppendEntriesResponse::kLastLogIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdResponse_AppendEntriesResponse::CmdResponse_AppendEntriesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:floyd.CmdResponse.AppendEntriesResponse)
}

void CmdResponse_AppendEntriesResponse::InitAsDefaultInstance() {
}

CmdResponse_AppendEntriesResponse::CmdResponse_AppendEntriesResponse(const CmdResponse_AppendEntriesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:floyd.CmdResponse.AppendEntriesResponse)
}

void CmdResponse_AppendEntriesResponse::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  success_ = false;
  last_log_index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdResponse_AppendEntriesResponse::~CmdResponse_AppendEntriesResponse() {
  // @@protoc_insertion_point(destructor:floyd.CmdResponse.AppendEntriesResponse)
  SharedDtor();
}

void CmdResponse_AppendEntriesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdResponse_AppendEntriesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdResponse_AppendEntriesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdResponse_AppendEntriesResponse_descriptor_;
}

const CmdResponse_AppendEntriesResponse& CmdResponse_AppendEntriesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_floyd_2eproto();
  return *default_instance_;
}

CmdResponse_AppendEntriesResponse* CmdResponse_AppendEntriesResponse::default_instance_ = NULL;

CmdResponse_AppendEntriesResponse* CmdResponse_AppendEntriesResponse::New(::google::protobuf::Arena* arena) const {
  CmdResponse_AppendEntriesResponse* n = new CmdResponse_AppendEntriesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdResponse_AppendEntriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:floyd.CmdResponse.AppendEntriesResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CmdResponse_AppendEntriesResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CmdResponse_AppendEntriesResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(term_, success_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdResponse_AppendEntriesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:floyd.CmdResponse.AppendEntriesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // required bool success = 2;
      case 2: {
        if (tag == 16) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_last_log_index;
        break;
      }

      // optional uint64 last_log_index = 3;
      case 3: {
        if (tag == 24) {
         parse_last_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_index_)));
          set_has_last_log_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:floyd.CmdResponse.AppendEntriesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:floyd.CmdResponse.AppendEntriesResponse)
  return false;
#undef DO_
}

void CmdResponse_AppendEntriesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:floyd.CmdResponse.AppendEntriesResponse)
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required bool success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // optional uint64 last_log_index = 3;
  if (has_last_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->last_log_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:floyd.CmdResponse.AppendEntriesResponse)
}

::google::protobuf::uint8* CmdResponse_AppendEntriesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:floyd.CmdResponse.AppendEntriesResponse)
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required bool success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // optional uint64 last_log_index = 3;
  if (has_last_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->last_log_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:floyd.CmdResponse.AppendEntriesResponse)
  return target;
}

int CmdResponse_AppendEntriesResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:floyd.CmdResponse.AppendEntriesResponse)
  int total_size = 0;

  if (has_term()) {
    // required uint64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  if (has_success()) {
    // required bool success = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
int CmdResponse_AppendEntriesResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:floyd.CmdResponse.AppendEntriesResponse)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());

    // required bool success = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint64 last_log_index = 3;
  if (has_last_log_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->last_log_index());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdResponse_AppendEntriesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:floyd.CmdResponse.AppendEntriesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CmdResponse_AppendEntriesResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdResponse_AppendEntriesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:floyd.CmdResponse.AppendEntriesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:floyd.CmdResponse.AppendEntriesResponse)
    MergeFrom(*source);
  }
}

void CmdResponse_AppendEntriesResponse::MergeFrom(const CmdResponse_AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:floyd.CmdResponse.AppendEntriesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_last_log_index()) {
      set_last_log_index(from.last_log_index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CmdResponse_AppendEntriesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:floyd.CmdResponse.AppendEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResponse_AppendEntriesResponse::CopyFrom(const CmdResponse_AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:floyd.CmdResponse.AppendEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdResponse_AppendEntriesResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CmdResponse_AppendEntriesResponse::Swap(CmdResponse_AppendEntriesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdResponse_AppendEntriesResponse::InternalSwap(CmdResponse_AppendEntriesResponse* other) {
  std::swap(term_, other->term_);
  std::swap(success_, other->success_);
  std::swap(last_log_index_, other->last_log_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdResponse_AppendEntriesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdResponse_AppendEntriesResponse_descriptor_;
  metadata.reflection = CmdResponse_AppendEntriesResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdResponse_KvResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdResponse_KvResponse::CmdResponse_KvResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:floyd.CmdResponse.KvResponse)
}

void CmdResponse_KvResponse::InitAsDefaultInstance() {
}

CmdResponse_KvResponse::CmdResponse_KvResponse(const CmdResponse_KvResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:floyd.CmdResponse.KvResponse)
}

void CmdResponse_KvResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdResponse_KvResponse::~CmdResponse_KvResponse() {
  // @@protoc_insertion_point(destructor:floyd.CmdResponse.KvResponse)
  SharedDtor();
}

void CmdResponse_KvResponse::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CmdResponse_KvResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdResponse_KvResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdResponse_KvResponse_descriptor_;
}

const CmdResponse_KvResponse& CmdResponse_KvResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_floyd_2eproto();
  return *default_instance_;
}

CmdResponse_KvResponse* CmdResponse_KvResponse::default_instance_ = NULL;

CmdResponse_KvResponse* CmdResponse_KvResponse::New(::google::protobuf::Arena* arena) const {
  CmdResponse_KvResponse* n = new CmdResponse_KvResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdResponse_KvResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:floyd.CmdResponse.KvResponse)
  if (has_value()) {
    value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdResponse_KvResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:floyd.CmdResponse.KvResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:floyd.CmdResponse.KvResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:floyd.CmdResponse.KvResponse)
  return false;
#undef DO_
}

void CmdResponse_KvResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:floyd.CmdResponse.KvResponse)
  // optional bytes value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:floyd.CmdResponse.KvResponse)
}

::google::protobuf::uint8* CmdResponse_KvResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:floyd.CmdResponse.KvResponse)
  // optional bytes value = 1;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:floyd.CmdResponse.KvResponse)
  return target;
}

int CmdResponse_KvResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:floyd.CmdResponse.KvResponse)
  int total_size = 0;

  // optional bytes value = 1;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdResponse_KvResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:floyd.CmdResponse.KvResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CmdResponse_KvResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdResponse_KvResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:floyd.CmdResponse.KvResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:floyd.CmdResponse.KvResponse)
    MergeFrom(*source);
  }
}

void CmdResponse_KvResponse::MergeFrom(const CmdResponse_KvResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:floyd.CmdResponse.KvResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CmdResponse_KvResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:floyd.CmdResponse.KvResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResponse_KvResponse::CopyFrom(const CmdResponse_KvResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:floyd.CmdResponse.KvResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdResponse_KvResponse::IsInitialized() const {

  return true;
}

void CmdResponse_KvResponse::Swap(CmdResponse_KvResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdResponse_KvResponse::InternalSwap(CmdResponse_KvResponse* other) {
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdResponse_KvResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdResponse_KvResponse_descriptor_;
  metadata.reflection = CmdResponse_KvResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdResponse_ServerStatus::kTermFieldNumber;
const int CmdResponse_ServerStatus::kCommitIndexFieldNumber;
const int CmdResponse_ServerStatus::kRoleFieldNumber;
const int CmdResponse_ServerStatus::kLeaderIpFieldNumber;
const int CmdResponse_ServerStatus::kLeaderPortFieldNumber;
const int CmdResponse_ServerStatus::kVotedForIpFieldNumber;
const int CmdResponse_ServerStatus::kVotedForPortFieldNumber;
const int CmdResponse_ServerStatus::kLastLogTermFieldNumber;
const int CmdResponse_ServerStatus::kLastLogIndexFieldNumber;
const int CmdResponse_ServerStatus::kLastAppliedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdResponse_ServerStatus::CmdResponse_ServerStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:floyd.CmdResponse.ServerStatus)
}

void CmdResponse_ServerStatus::InitAsDefaultInstance() {
}

CmdResponse_ServerStatus::CmdResponse_ServerStatus(const CmdResponse_ServerStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:floyd.CmdResponse.ServerStatus)
}

void CmdResponse_ServerStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  commit_index_ = GOOGLE_ULONGLONG(0);
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_port_ = 0;
  voted_for_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voted_for_port_ = 0;
  last_log_term_ = GOOGLE_ULONGLONG(0);
  last_log_index_ = GOOGLE_ULONGLONG(0);
  last_applied_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdResponse_ServerStatus::~CmdResponse_ServerStatus() {
  // @@protoc_insertion_point(destructor:floyd.CmdResponse.ServerStatus)
  SharedDtor();
}

void CmdResponse_ServerStatus::SharedDtor() {
  role_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voted_for_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CmdResponse_ServerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdResponse_ServerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdResponse_ServerStatus_descriptor_;
}

const CmdResponse_ServerStatus& CmdResponse_ServerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_floyd_2eproto();
  return *default_instance_;
}

CmdResponse_ServerStatus* CmdResponse_ServerStatus::default_instance_ = NULL;

CmdResponse_ServerStatus* CmdResponse_ServerStatus::New(::google::protobuf::Arena* arena) const {
  CmdResponse_ServerStatus* n = new CmdResponse_ServerStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdResponse_ServerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:floyd.CmdResponse.ServerStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CmdResponse_ServerStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CmdResponse_ServerStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(term_, commit_index_);
    ZR_(leader_port_, last_log_term_);
    if (has_role()) {
      role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_leader_ip()) {
      leader_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_voted_for_ip()) {
      voted_for_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(last_log_index_, last_applied_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdResponse_ServerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:floyd.CmdResponse.ServerStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_commit_index;
        break;
      }

      // required uint64 commit_index = 2;
      case 2: {
        if (tag == 16) {
         parse_commit_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_index_)));
          set_has_commit_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_role;
        break;
      }

      // required bytes role = 3;
      case 3: {
        if (tag == 26) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_role()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_leader_ip;
        break;
      }

      // optional bytes leader_ip = 4;
      case 4: {
        if (tag == 34) {
         parse_leader_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_leader_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_leader_port;
        break;
      }

      // optional int32 leader_port = 5;
      case 5: {
        if (tag == 40) {
         parse_leader_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leader_port_)));
          set_has_leader_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_voted_for_ip;
        break;
      }

      // optional bytes voted_for_ip = 6;
      case 6: {
        if (tag == 50) {
         parse_voted_for_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voted_for_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_voted_for_port;
        break;
      }

      // optional int32 voted_for_port = 7;
      case 7: {
        if (tag == 56) {
         parse_voted_for_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voted_for_port_)));
          set_has_voted_for_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_last_log_term;
        break;
      }

      // optional uint64 last_log_term = 8;
      case 8: {
        if (tag == 64) {
         parse_last_log_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_term_)));
          set_has_last_log_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_last_log_index;
        break;
      }

      // optional uint64 last_log_index = 9;
      case 9: {
        if (tag == 72) {
         parse_last_log_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_index_)));
          set_has_last_log_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_last_applied;
        break;
      }

      // optional uint64 last_applied = 10;
      case 10: {
        if (tag == 80) {
         parse_last_applied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_applied_)));
          set_has_last_applied();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:floyd.CmdResponse.ServerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:floyd.CmdResponse.ServerStatus)
  return false;
#undef DO_
}

void CmdResponse_ServerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:floyd.CmdResponse.ServerStatus)
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required uint64 commit_index = 2;
  if (has_commit_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->commit_index(), output);
  }

  // required bytes role = 3;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->role(), output);
  }

  // optional bytes leader_ip = 4;
  if (has_leader_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->leader_ip(), output);
  }

  // optional int32 leader_port = 5;
  if (has_leader_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->leader_port(), output);
  }

  // optional bytes voted_for_ip = 6;
  if (has_voted_for_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->voted_for_ip(), output);
  }

  // optional int32 voted_for_port = 7;
  if (has_voted_for_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->voted_for_port(), output);
  }

  // optional uint64 last_log_term = 8;
  if (has_last_log_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->last_log_term(), output);
  }

  // optional uint64 last_log_index = 9;
  if (has_last_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->last_log_index(), output);
  }

  // optional uint64 last_applied = 10;
  if (has_last_applied()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->last_applied(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:floyd.CmdResponse.ServerStatus)
}

::google::protobuf::uint8* CmdResponse_ServerStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:floyd.CmdResponse.ServerStatus)
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required uint64 commit_index = 2;
  if (has_commit_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->commit_index(), target);
  }

  // required bytes role = 3;
  if (has_role()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->role(), target);
  }

  // optional bytes leader_ip = 4;
  if (has_leader_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->leader_ip(), target);
  }

  // optional int32 leader_port = 5;
  if (has_leader_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->leader_port(), target);
  }

  // optional bytes voted_for_ip = 6;
  if (has_voted_for_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->voted_for_ip(), target);
  }

  // optional int32 voted_for_port = 7;
  if (has_voted_for_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->voted_for_port(), target);
  }

  // optional uint64 last_log_term = 8;
  if (has_last_log_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->last_log_term(), target);
  }

  // optional uint64 last_log_index = 9;
  if (has_last_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->last_log_index(), target);
  }

  // optional uint64 last_applied = 10;
  if (has_last_applied()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->last_applied(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:floyd.CmdResponse.ServerStatus)
  return target;
}

int CmdResponse_ServerStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:floyd.CmdResponse.ServerStatus)
  int total_size = 0;

  if (has_term()) {
    // required uint64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  if (has_commit_index()) {
    // required uint64 commit_index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit_index());
  }

  if (has_role()) {
    // required bytes role = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->role());
  }

  return total_size;
}
int CmdResponse_ServerStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:floyd.CmdResponse.ServerStatus)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());

    // required uint64 commit_index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit_index());

    // required bytes role = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->role());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 248u) {
    // optional bytes leader_ip = 4;
    if (has_leader_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->leader_ip());
    }

    // optional int32 leader_port = 5;
    if (has_leader_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leader_port());
    }

    // optional bytes voted_for_ip = 6;
    if (has_voted_for_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->voted_for_ip());
    }

    // optional int32 voted_for_port = 7;
    if (has_voted_for_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->voted_for_port());
    }

    // optional uint64 last_log_term = 8;
    if (has_last_log_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_log_term());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint64 last_log_index = 9;
    if (has_last_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_log_index());
    }

    // optional uint64 last_applied = 10;
    if (has_last_applied()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_applied());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdResponse_ServerStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:floyd.CmdResponse.ServerStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CmdResponse_ServerStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdResponse_ServerStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:floyd.CmdResponse.ServerStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:floyd.CmdResponse.ServerStatus)
    MergeFrom(*source);
  }
}

void CmdResponse_ServerStatus::MergeFrom(const CmdResponse_ServerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:floyd.CmdResponse.ServerStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_commit_index()) {
      set_commit_index(from.commit_index());
    }
    if (from.has_role()) {
      set_has_role();
      role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
    }
    if (from.has_leader_ip()) {
      set_has_leader_ip();
      leader_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_ip_);
    }
    if (from.has_leader_port()) {
      set_leader_port(from.leader_port());
    }
    if (from.has_voted_for_ip()) {
      set_has_voted_for_ip();
      voted_for_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voted_for_ip_);
    }
    if (from.has_voted_for_port()) {
      set_voted_for_port(from.voted_for_port());
    }
    if (from.has_last_log_term()) {
      set_last_log_term(from.last_log_term());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_log_index()) {
      set_last_log_index(from.last_log_index());
    }
    if (from.has_last_applied()) {
      set_last_applied(from.last_applied());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CmdResponse_ServerStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:floyd.CmdResponse.ServerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResponse_ServerStatus::CopyFrom(const CmdResponse_ServerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:floyd.CmdResponse.ServerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdResponse_ServerStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CmdResponse_ServerStatus::Swap(CmdResponse_ServerStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdResponse_ServerStatus::InternalSwap(CmdResponse_ServerStatus* other) {
  std::swap(term_, other->term_);
  std::swap(commit_index_, other->commit_index_);
  role_.Swap(&other->role_);
  leader_ip_.Swap(&other->leader_ip_);
  std::swap(leader_port_, other->leader_port_);
  voted_for_ip_.Swap(&other->voted_for_ip_);
  std::swap(voted_for_port_, other->voted_for_port_);
  std::swap(last_log_term_, other->last_log_term_);
  std::swap(last_log_index_, other->last_log_index_);
  std::swap(last_applied_, other->last_applied_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdResponse_ServerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdResponse_ServerStatus_descriptor_;
  metadata.reflection = CmdResponse_ServerStatus_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdResponse::kTypeFieldNumber;
const int CmdResponse::kCodeFieldNumber;
const int CmdResponse::kRequestVoteResFieldNumber;
const int CmdResponse::kAppendEntriesResFieldNumber;
const int CmdResponse::kMsgFieldNumber;
const int CmdResponse::kKvResponseFieldNumber;
const int CmdResponse::kServerStatusFieldNumber;
const int CmdResponse::kAllServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdResponse::CmdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:floyd.CmdResponse)
}

void CmdResponse::InitAsDefaultInstance() {
  request_vote_res_ = const_cast< ::floyd::CmdResponse_RequestVoteResponse*>(&::floyd::CmdResponse_RequestVoteResponse::default_instance());
  append_entries_res_ = const_cast< ::floyd::CmdResponse_AppendEntriesResponse*>(&::floyd::CmdResponse_AppendEntriesResponse::default_instance());
  kv_response_ = const_cast< ::floyd::CmdResponse_KvResponse*>(&::floyd::CmdResponse_KvResponse::default_instance());
  server_status_ = const_cast< ::floyd::CmdResponse_ServerStatus*>(&::floyd::CmdResponse_ServerStatus::default_instance());
  all_servers_ = const_cast< ::floyd::Membership*>(&::floyd::Membership::default_instance());
}

CmdResponse::CmdResponse(const CmdResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:floyd.CmdResponse)
}

void CmdResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  code_ = 0;
  request_vote_res_ = NULL;
  append_entries_res_ = NULL;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kv_response_ = NULL;
  server_status_ = NULL;
  all_servers_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdResponse::~CmdResponse() {
  // @@protoc_insertion_point(destructor:floyd.CmdResponse)
  SharedDtor();
}

void CmdResponse::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete request_vote_res_;
    delete append_entries_res_;
    delete kv_response_;
    delete server_status_;
    delete all_servers_;
  }
}

void CmdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdResponse_descriptor_;
}

const CmdResponse& CmdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_floyd_2eproto();
  return *default_instance_;
}

CmdResponse* CmdResponse::default_instance_ = NULL;

CmdResponse* CmdResponse::New(::google::protobuf::Arena* arena) const {
  CmdResponse* n = new CmdResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:floyd.CmdResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CmdResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CmdResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(type_, code_);
    if (has_request_vote_res()) {
      if (request_vote_res_ != NULL) request_vote_res_->::floyd::CmdResponse_RequestVoteResponse::Clear();
    }
    if (has_append_entries_res()) {
      if (append_entries_res_ != NULL) append_entries_res_->::floyd::CmdResponse_AppendEntriesResponse::Clear();
    }
    if (has_msg()) {
      msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_kv_response()) {
      if (kv_response_ != NULL) kv_response_->::floyd::CmdResponse_KvResponse::Clear();
    }
    if (has_server_status()) {
      if (server_status_ != NULL) server_status_->::floyd::CmdResponse_ServerStatus::Clear();
    }
    if (has_all_servers()) {
      if (all_servers_ != NULL) all_servers_->::floyd::Membership::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CmdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:floyd.CmdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .floyd.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::floyd::Type_IsValid(value)) {
            set_type(static_cast< ::floyd::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional .floyd.StatusCode code = 2;
      case 2: {
        if (tag == 16) {
         parse_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::floyd::StatusCode_IsValid(value)) {
            set_code(static_cast< ::floyd::StatusCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_request_vote_res;
        break;
      }

      // optional .floyd.CmdResponse.RequestVoteResponse request_vote_res = 3;
      case 3: {
        if (tag == 26) {
         parse_request_vote_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_vote_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_append_entries_res;
        break;
      }

      // optional .floyd.CmdResponse.AppendEntriesResponse append_entries_res = 4;
      case 4: {
        if (tag == 34) {
         parse_append_entries_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_append_entries_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msg;
        break;
      }

      // optional bytes msg = 5;
      case 5: {
        if (tag == 42) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_kv_response;
        break;
      }

      // optional .floyd.CmdResponse.KvResponse kv_response = 6;
      case 6: {
        if (tag == 50) {
         parse_kv_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_server_status;
        break;
      }

      // optional .floyd.CmdResponse.ServerStatus server_status = 7;
      case 7: {
        if (tag == 58) {
         parse_server_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_all_servers;
        break;
      }

      // optional .floyd.Membership all_servers = 8;
      case 8: {
        if (tag == 66) {
         parse_all_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_all_servers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:floyd.CmdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:floyd.CmdResponse)
  return false;
#undef DO_
}

void CmdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:floyd.CmdResponse)
  // required .floyd.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .floyd.StatusCode code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->code(), output);
  }

  // optional .floyd.CmdResponse.RequestVoteResponse request_vote_res = 3;
  if (has_request_vote_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->request_vote_res_, output);
  }

  // optional .floyd.CmdResponse.AppendEntriesResponse append_entries_res = 4;
  if (has_append_entries_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->append_entries_res_, output);
  }

  // optional bytes msg = 5;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->msg(), output);
  }

  // optional .floyd.CmdResponse.KvResponse kv_response = 6;
  if (has_kv_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->kv_response_, output);
  }

  // optional .floyd.CmdResponse.ServerStatus server_status = 7;
  if (has_server_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->server_status_, output);
  }

  // optional .floyd.Membership all_servers = 8;
  if (has_all_servers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->all_servers_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:floyd.CmdResponse)
}

::google::protobuf::uint8* CmdResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:floyd.CmdResponse)
  // required .floyd.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .floyd.StatusCode code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->code(), target);
  }

  // optional .floyd.CmdResponse.RequestVoteResponse request_vote_res = 3;
  if (has_request_vote_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->request_vote_res_, false, target);
  }

  // optional .floyd.CmdResponse.AppendEntriesResponse append_entries_res = 4;
  if (has_append_entries_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->append_entries_res_, false, target);
  }

  // optional bytes msg = 5;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->msg(), target);
  }

  // optional .floyd.CmdResponse.KvResponse kv_response = 6;
  if (has_kv_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->kv_response_, false, target);
  }

  // optional .floyd.CmdResponse.ServerStatus server_status = 7;
  if (has_server_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->server_status_, false, target);
  }

  // optional .floyd.Membership all_servers = 8;
  if (has_all_servers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->all_servers_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:floyd.CmdResponse)
  return target;
}

int CmdResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:floyd.CmdResponse)
  int total_size = 0;

  // required .floyd.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional .floyd.StatusCode code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // optional .floyd.CmdResponse.RequestVoteResponse request_vote_res = 3;
    if (has_request_vote_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_vote_res_);
    }

    // optional .floyd.CmdResponse.AppendEntriesResponse append_entries_res = 4;
    if (has_append_entries_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->append_entries_res_);
    }

    // optional bytes msg = 5;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

    // optional .floyd.CmdResponse.KvResponse kv_response = 6;
    if (has_kv_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kv_response_);
    }

    // optional .floyd.CmdResponse.ServerStatus server_status = 7;
    if (has_server_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->server_status_);
    }

    // optional .floyd.Membership all_servers = 8;
    if (has_all_servers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->all_servers_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:floyd.CmdResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CmdResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:floyd.CmdResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:floyd.CmdResponse)
    MergeFrom(*source);
  }
}

void CmdResponse::MergeFrom(const CmdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:floyd.CmdResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_request_vote_res()) {
      mutable_request_vote_res()->::floyd::CmdResponse_RequestVoteResponse::MergeFrom(from.request_vote_res());
    }
    if (from.has_append_entries_res()) {
      mutable_append_entries_res()->::floyd::CmdResponse_AppendEntriesResponse::MergeFrom(from.append_entries_res());
    }
    if (from.has_msg()) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (from.has_kv_response()) {
      mutable_kv_response()->::floyd::CmdResponse_KvResponse::MergeFrom(from.kv_response());
    }
    if (from.has_server_status()) {
      mutable_server_status()->::floyd::CmdResponse_ServerStatus::MergeFrom(from.server_status());
    }
    if (from.has_all_servers()) {
      mutable_all_servers()->::floyd::Membership::MergeFrom(from.all_servers());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CmdResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:floyd.CmdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResponse::CopyFrom(const CmdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:floyd.CmdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_request_vote_res()) {
    if (!this->request_vote_res_->IsInitialized()) return false;
  }
  if (has_append_entries_res()) {
    if (!this->append_entries_res_->IsInitialized()) return false;
  }
  if (has_server_status()) {
    if (!this->server_status_->IsInitialized()) return false;
  }
  return true;
}

void CmdResponse::Swap(CmdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdResponse::InternalSwap(CmdResponse* other) {
  std::swap(type_, other->type_);
  std::swap(code_, other->code_);
  std::swap(request_vote_res_, other->request_vote_res_);
  std::swap(append_entries_res_, other->append_entries_res_);
  msg_.Swap(&other->msg_);
  std::swap(kv_response_, other->kv_response_);
  std::swap(server_status_, other->server_status_);
  std::swap(all_servers_, other->all_servers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdResponse_descriptor_;
  metadata.reflection = CmdResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdResponse_RequestVoteResponse

// required uint64 term = 1;
bool CmdResponse_RequestVoteResponse::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdResponse_RequestVoteResponse::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdResponse_RequestVoteResponse::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdResponse_RequestVoteResponse::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
 ::google::protobuf::uint64 CmdResponse_RequestVoteResponse::term() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.RequestVoteResponse.term)
  return term_;
}
 void CmdResponse_RequestVoteResponse::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.RequestVoteResponse.term)
}

// required bool vote_granted = 2;
bool CmdResponse_RequestVoteResponse::has_vote_granted() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CmdResponse_RequestVoteResponse::set_has_vote_granted() {
  _has_bits_[0] |= 0x00000002u;
}
void CmdResponse_RequestVoteResponse::clear_has_vote_granted() {
  _has_bits_[0] &= ~0x00000002u;
}
void CmdResponse_RequestVoteResponse::clear_vote_granted() {
  vote_granted_ = false;
  clear_has_vote_granted();
}
 bool CmdResponse_RequestVoteResponse::vote_granted() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.RequestVoteResponse.vote_granted)
  return vote_granted_;
}
 void CmdResponse_RequestVoteResponse::set_vote_granted(bool value) {
  set_has_vote_granted();
  vote_granted_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.RequestVoteResponse.vote_granted)
}

// -------------------------------------------------------------------

// CmdResponse_AppendEntriesResponse

// required uint64 term = 1;
bool CmdResponse_AppendEntriesResponse::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdResponse_AppendEntriesResponse::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdResponse_AppendEntriesResponse::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdResponse_AppendEntriesResponse::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
 ::google::protobuf::uint64 CmdResponse_AppendEntriesResponse::term() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.AppendEntriesResponse.term)
  return term_;
}
 void CmdResponse_AppendEntriesResponse::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.AppendEntriesResponse.term)
}

// required bool success = 2;
bool CmdResponse_AppendEntriesResponse::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CmdResponse_AppendEntriesResponse::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
void CmdResponse_AppendEntriesResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
void CmdResponse_AppendEntriesResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
 bool CmdResponse_AppendEntriesResponse::success() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.AppendEntriesResponse.success)
  return success_;
}
 void CmdResponse_AppendEntriesResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.AppendEntriesResponse.success)
}

// optional uint64 last_log_index = 3;
bool CmdResponse_AppendEntriesResponse::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CmdResponse_AppendEntriesResponse::set_has_last_log_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CmdResponse_AppendEntriesResponse::clear_has_last_log_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CmdResponse_AppendEntriesResponse::clear_last_log_index() {
  last_log_index_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_index();
}
 ::google::protobuf::uint64 CmdResponse_AppendEntriesResponse::last_log_index() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.AppendEntriesResponse.last_log_index)
  return last_log_index_;
}
 void CmdResponse_AppendEntriesResponse::set_last_log_index(::google::protobuf::uint64 value) {
  set_has_last_log_index();
  last_log_index_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.AppendEntriesResponse.last_log_index)
}

// -------------------------------------------------------------------

// CmdResponse_KvResponse

// optional bytes value = 1;
bool CmdResponse_KvResponse::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdResponse_KvResponse::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdResponse_KvResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdResponse_KvResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& CmdResponse_KvResponse::value() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.KvResponse.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CmdResponse_KvResponse::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.KvResponse.value)
}
 void CmdResponse_KvResponse::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdResponse.KvResponse.value)
}
 void CmdResponse_KvResponse::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdResponse.KvResponse.value)
}
 ::std::string* CmdResponse_KvResponse::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.KvResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CmdResponse_KvResponse::release_value() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.KvResponse.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CmdResponse_KvResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.KvResponse.value)
}

// -------------------------------------------------------------------

// CmdResponse_ServerStatus

// required uint64 term = 1;
bool CmdResponse_ServerStatus::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdResponse_ServerStatus::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdResponse_ServerStatus::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdResponse_ServerStatus::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
 ::google::protobuf::uint64 CmdResponse_ServerStatus::term() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.term)
  return term_;
}
 void CmdResponse_ServerStatus::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.term)
}

// required uint64 commit_index = 2;
bool CmdResponse_ServerStatus::has_commit_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CmdResponse_ServerStatus::set_has_commit_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CmdResponse_ServerStatus::clear_has_commit_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CmdResponse_ServerStatus::clear_commit_index() {
  commit_index_ = GOOGLE_ULONGLONG(0);
  clear_has_commit_index();
}
 ::google::protobuf::uint64 CmdResponse_ServerStatus::commit_index() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.commit_index)
  return commit_index_;
}
 void CmdResponse_ServerStatus::set_commit_index(::google::protobuf::uint64 value) {
  set_has_commit_index();
  commit_index_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.commit_index)
}

// required bytes role = 3;
bool CmdResponse_ServerStatus::has_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CmdResponse_ServerStatus::set_has_role() {
  _has_bits_[0] |= 0x00000004u;
}
void CmdResponse_ServerStatus::clear_has_role() {
  _has_bits_[0] &= ~0x00000004u;
}
void CmdResponse_ServerStatus::clear_role() {
  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_role();
}
 const ::std::string& CmdResponse_ServerStatus::role() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.role)
  return role_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CmdResponse_ServerStatus::set_role(const ::std::string& value) {
  set_has_role();
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.role)
}
 void CmdResponse_ServerStatus::set_role(const char* value) {
  set_has_role();
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdResponse.ServerStatus.role)
}
 void CmdResponse_ServerStatus::set_role(const void* value, size_t size) {
  set_has_role();
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdResponse.ServerStatus.role)
}
 ::std::string* CmdResponse_ServerStatus::mutable_role() {
  set_has_role();
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.ServerStatus.role)
  return role_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CmdResponse_ServerStatus::release_role() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.ServerStatus.role)
  clear_has_role();
  return role_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CmdResponse_ServerStatus::set_allocated_role(::std::string* role) {
  if (role != NULL) {
    set_has_role();
  } else {
    clear_has_role();
  }
  role_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.ServerStatus.role)
}

// optional bytes leader_ip = 4;
bool CmdResponse_ServerStatus::has_leader_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CmdResponse_ServerStatus::set_has_leader_ip() {
  _has_bits_[0] |= 0x00000008u;
}
void CmdResponse_ServerStatus::clear_has_leader_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
void CmdResponse_ServerStatus::clear_leader_ip() {
  leader_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leader_ip();
}
 const ::std::string& CmdResponse_ServerStatus::leader_ip() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.leader_ip)
  return leader_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CmdResponse_ServerStatus::set_leader_ip(const ::std::string& value) {
  set_has_leader_ip();
  leader_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.leader_ip)
}
 void CmdResponse_ServerStatus::set_leader_ip(const char* value) {
  set_has_leader_ip();
  leader_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdResponse.ServerStatus.leader_ip)
}
 void CmdResponse_ServerStatus::set_leader_ip(const void* value, size_t size) {
  set_has_leader_ip();
  leader_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdResponse.ServerStatus.leader_ip)
}
 ::std::string* CmdResponse_ServerStatus::mutable_leader_ip() {
  set_has_leader_ip();
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.ServerStatus.leader_ip)
  return leader_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CmdResponse_ServerStatus::release_leader_ip() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.ServerStatus.leader_ip)
  clear_has_leader_ip();
  return leader_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CmdResponse_ServerStatus::set_allocated_leader_ip(::std::string* leader_ip) {
  if (leader_ip != NULL) {
    set_has_leader_ip();
  } else {
    clear_has_leader_ip();
  }
  leader_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_ip);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.ServerStatus.leader_ip)
}

// optional int32 leader_port = 5;
bool CmdResponse_ServerStatus::has_leader_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CmdResponse_ServerStatus::set_has_leader_port() {
  _has_bits_[0] |= 0x00000010u;
}
void CmdResponse_ServerStatus::clear_has_leader_port() {
  _has_bits_[0] &= ~0x00000010u;
}
void CmdResponse_ServerStatus::clear_leader_port() {
  leader_port_ = 0;
  clear_has_leader_port();
}
 ::google::protobuf::int32 CmdResponse_ServerStatus::leader_port() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.leader_port)
  return leader_port_;
}
 void CmdResponse_ServerStatus::set_leader_port(::google::protobuf::int32 value) {
  set_has_leader_port();
  leader_port_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.leader_port)
}

// optional bytes voted_for_ip = 6;
bool CmdResponse_ServerStatus::has_voted_for_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CmdResponse_ServerStatus::set_has_voted_for_ip() {
  _has_bits_[0] |= 0x00000020u;
}
void CmdResponse_ServerStatus::clear_has_voted_for_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
void CmdResponse_ServerStatus::clear_voted_for_ip() {
  voted_for_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_voted_for_ip();
}
 const ::std::string& CmdResponse_ServerStatus::voted_for_ip() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.voted_for_ip)
  return voted_for_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CmdResponse_ServerStatus::set_voted_for_ip(const ::std::string& value) {
  set_has_voted_for_ip();
  voted_for_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.voted_for_ip)
}
 void CmdResponse_ServerStatus::set_voted_for_ip(const char* value) {
  set_has_voted_for_ip();
  voted_for_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdResponse.ServerStatus.voted_for_ip)
}
 void CmdResponse_ServerStatus::set_voted_for_ip(const void* value, size_t size) {
  set_has_voted_for_ip();
  voted_for_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdResponse.ServerStatus.voted_for_ip)
}
 ::std::string* CmdResponse_ServerStatus::mutable_voted_for_ip() {
  set_has_voted_for_ip();
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.ServerStatus.voted_for_ip)
  return voted_for_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CmdResponse_ServerStatus::release_voted_for_ip() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.ServerStatus.voted_for_ip)
  clear_has_voted_for_ip();
  return voted_for_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CmdResponse_ServerStatus::set_allocated_voted_for_ip(::std::string* voted_for_ip) {
  if (voted_for_ip != NULL) {
    set_has_voted_for_ip();
  } else {
    clear_has_voted_for_ip();
  }
  voted_for_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voted_for_ip);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.ServerStatus.voted_for_ip)
}

// optional int32 voted_for_port = 7;
bool CmdResponse_ServerStatus::has_voted_for_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CmdResponse_ServerStatus::set_has_voted_for_port() {
  _has_bits_[0] |= 0x00000040u;
}
void CmdResponse_ServerStatus::clear_has_voted_for_port() {
  _has_bits_[0] &= ~0x00000040u;
}
void CmdResponse_ServerStatus::clear_voted_for_port() {
  voted_for_port_ = 0;
  clear_has_voted_for_port();
}
 ::google::protobuf::int32 CmdResponse_ServerStatus::voted_for_port() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.voted_for_port)
  return voted_for_port_;
}
 void CmdResponse_ServerStatus::set_voted_for_port(::google::protobuf::int32 value) {
  set_has_voted_for_port();
  voted_for_port_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.voted_for_port)
}

// optional uint64 last_log_term = 8;
bool CmdResponse_ServerStatus::has_last_log_term() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CmdResponse_ServerStatus::set_has_last_log_term() {
  _has_bits_[0] |= 0x00000080u;
}
void CmdResponse_ServerStatus::clear_has_last_log_term() {
  _has_bits_[0] &= ~0x00000080u;
}
void CmdResponse_ServerStatus::clear_last_log_term() {
  last_log_term_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_term();
}
 ::google::protobuf::uint64 CmdResponse_ServerStatus::last_log_term() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.last_log_term)
  return last_log_term_;
}
 void CmdResponse_ServerStatus::set_last_log_term(::google::protobuf::uint64 value) {
  set_has_last_log_term();
  last_log_term_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.last_log_term)
}

// optional uint64 last_log_index = 9;
bool CmdResponse_ServerStatus::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CmdResponse_ServerStatus::set_has_last_log_index() {
  _has_bits_[0] |= 0x00000100u;
}
void CmdResponse_ServerStatus::clear_has_last_log_index() {
  _has_bits_[0] &= ~0x00000100u;
}
void CmdResponse_ServerStatus::clear_last_log_index() {
  last_log_index_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_index();
}
 ::google::protobuf::uint64 CmdResponse_ServerStatus::last_log_index() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.last_log_index)
  return last_log_index_;
}
 void CmdResponse_ServerStatus::set_last_log_index(::google::protobuf::uint64 value) {
  set_has_last_log_index();
  last_log_index_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.last_log_index)
}

// optional uint64 last_applied = 10;
bool CmdResponse_ServerStatus::has_last_applied() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CmdResponse_ServerStatus::set_has_last_applied() {
  _has_bits_[0] |= 0x00000200u;
}
void CmdResponse_ServerStatus::clear_has_last_applied() {
  _has_bits_[0] &= ~0x00000200u;
}
void CmdResponse_ServerStatus::clear_last_applied() {
  last_applied_ = GOOGLE_ULONGLONG(0);
  clear_has_last_applied();
}
 ::google::protobuf::uint64 CmdResponse_ServerStatus::last_applied() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.last_applied)
  return last_applied_;
}
 void CmdResponse_ServerStatus::set_last_applied(::google::protobuf::uint64 value) {
  set_has_last_applied();
  last_applied_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.last_applied)
}

// -------------------------------------------------------------------

// CmdResponse

// required .floyd.Type type = 1;
bool CmdResponse::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdResponse::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdResponse::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::floyd::Type CmdResponse::type() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.type)
  return static_cast< ::floyd::Type >(type_);
}
 void CmdResponse::set_type(::floyd::Type value) {
  assert(::floyd::Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.type)
}

// optional .floyd.StatusCode code = 2;
bool CmdResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CmdResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void CmdResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void CmdResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
 ::floyd::StatusCode CmdResponse::code() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.code)
  return static_cast< ::floyd::StatusCode >(code_);
}
 void CmdResponse::set_code(::floyd::StatusCode value) {
  assert(::floyd::StatusCode_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.code)
}

// optional .floyd.CmdResponse.RequestVoteResponse request_vote_res = 3;
bool CmdResponse::has_request_vote_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CmdResponse::set_has_request_vote_res() {
  _has_bits_[0] |= 0x00000004u;
}
void CmdResponse::clear_has_request_vote_res() {
  _has_bits_[0] &= ~0x00000004u;
}
void CmdResponse::clear_request_vote_res() {
  if (request_vote_res_ != NULL) request_vote_res_->::floyd::CmdResponse_RequestVoteResponse::Clear();
  clear_has_request_vote_res();
}
const ::floyd::CmdResponse_RequestVoteResponse& CmdResponse::request_vote_res() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.request_vote_res)
  return request_vote_res_ != NULL ? *request_vote_res_ : *default_instance_->request_vote_res_;
}
::floyd::CmdResponse_RequestVoteResponse* CmdResponse::mutable_request_vote_res() {
  set_has_request_vote_res();
  if (request_vote_res_ == NULL) {
    request_vote_res_ = new ::floyd::CmdResponse_RequestVoteResponse;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.request_vote_res)
  return request_vote_res_;
}
::floyd::CmdResponse_RequestVoteResponse* CmdResponse::release_request_vote_res() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.request_vote_res)
  clear_has_request_vote_res();
  ::floyd::CmdResponse_RequestVoteResponse* temp = request_vote_res_;
  request_vote_res_ = NULL;
  return temp;
}
void CmdResponse::set_allocated_request_vote_res(::floyd::CmdResponse_RequestVoteResponse* request_vote_res) {
  delete request_vote_res_;
  request_vote_res_ = request_vote_res;
  if (request_vote_res) {
    set_has_request_vote_res();
  } else {
    clear_has_request_vote_res();
  }
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.request_vote_res)
}

// optional .floyd.CmdResponse.AppendEntriesResponse append_entries_res = 4;
bool CmdResponse::has_append_entries_res() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CmdResponse::set_has_append_entries_res() {
  _has_bits_[0] |= 0x00000008u;
}
void CmdResponse::clear_has_append_entries_res() {
  _has_bits_[0] &= ~0x00000008u;
}
void CmdResponse::clear_append_entries_res() {
  if (append_entries_res_ != NULL) append_entries_res_->::floyd::CmdResponse_AppendEntriesResponse::Clear();
  clear_has_append_entries_res();
}
const ::floyd::CmdResponse_AppendEntriesResponse& CmdResponse::append_entries_res() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.append_entries_res)
  return append_entries_res_ != NULL ? *append_entries_res_ : *default_instance_->append_entries_res_;
}
::floyd::CmdResponse_AppendEntriesResponse* CmdResponse::mutable_append_entries_res() {
  set_has_append_entries_res();
  if (append_entries_res_ == NULL) {
    append_entries_res_ = new ::floyd::CmdResponse_AppendEntriesResponse;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.append_entries_res)
  return append_entries_res_;
}
::floyd::CmdResponse_AppendEntriesResponse* CmdResponse::release_append_entries_res() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.append_entries_res)
  clear_has_append_entries_res();
  ::floyd::CmdResponse_AppendEntriesResponse* temp = append_entries_res_;
  append_entries_res_ = NULL;
  return temp;
}
void CmdResponse::set_allocated_append_entries_res(::floyd::CmdResponse_AppendEntriesResponse* append_entries_res) {
  delete append_entries_res_;
  append_entries_res_ = append_entries_res;
  if (append_entries_res) {
    set_has_append_entries_res();
  } else {
    clear_has_append_entries_res();
  }
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.append_entries_res)
}

// optional bytes msg = 5;
bool CmdResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CmdResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000010u;
}
void CmdResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
void CmdResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
 const ::std::string& CmdResponse::msg() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CmdResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.msg)
}
 void CmdResponse::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdResponse.msg)
}
 void CmdResponse::set_msg(const void* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdResponse.msg)
}
 ::std::string* CmdResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CmdResponse::release_msg() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CmdResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.msg)
}

// optional .floyd.CmdResponse.KvResponse kv_response = 6;
bool CmdResponse::has_kv_response() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CmdResponse::set_has_kv_response() {
  _has_bits_[0] |= 0x00000020u;
}
void CmdResponse::clear_has_kv_response() {
  _has_bits_[0] &= ~0x00000020u;
}
void CmdResponse::clear_kv_response() {
  if (kv_response_ != NULL) kv_response_->::floyd::CmdResponse_KvResponse::Clear();
  clear_has_kv_response();
}
const ::floyd::CmdResponse_KvResponse& CmdResponse::kv_response() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.kv_response)
  return kv_response_ != NULL ? *kv_response_ : *default_instance_->kv_response_;
}
::floyd::CmdResponse_KvResponse* CmdResponse::mutable_kv_response() {
  set_has_kv_response();
  if (kv_response_ == NULL) {
    kv_response_ = new ::floyd::CmdResponse_KvResponse;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.kv_response)
  return kv_response_;
}
::floyd::CmdResponse_KvResponse* CmdResponse::release_kv_response() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.kv_response)
  clear_has_kv_response();
  ::floyd::CmdResponse_KvResponse* temp = kv_response_;
  kv_response_ = NULL;
  return temp;
}
void CmdResponse::set_allocated_kv_response(::floyd::CmdResponse_KvResponse* kv_response) {
  delete kv_response_;
  kv_response_ = kv_response;
  if (kv_response) {
    set_has_kv_response();
  } else {
    clear_has_kv_response();
  }
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.kv_response)
}

// optional .floyd.CmdResponse.ServerStatus server_status = 7;
bool CmdResponse::has_server_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CmdResponse::set_has_server_status() {
  _has_bits_[0] |= 0x00000040u;
}
void CmdResponse::clear_has_server_status() {
  _has_bits_[0] &= ~0x00000040u;
}
void CmdResponse::clear_server_status() {
  if (server_status_ != NULL) server_status_->::floyd::CmdResponse_ServerStatus::Clear();
  clear_has_server_status();
}
const ::floyd::CmdResponse_ServerStatus& CmdResponse::server_status() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.server_status)
  return server_status_ != NULL ? *server_status_ : *default_instance_->server_status_;
}
::floyd::CmdResponse_ServerStatus* CmdResponse::mutable_server_status() {
  set_has_server_status();
  if (server_status_ == NULL) {
    server_status_ = new ::floyd::CmdResponse_ServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.server_status)
  return server_status_;
}
::floyd::CmdResponse_ServerStatus* CmdResponse::release_server_status() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.server_status)
  clear_has_server_status();
  ::floyd::CmdResponse_ServerStatus* temp = server_status_;
  server_status_ = NULL;
  return temp;
}
void CmdResponse::set_allocated_server_status(::floyd::CmdResponse_ServerStatus* server_status) {
  delete server_status_;
  server_status_ = server_status;
  if (server_status) {
    set_has_server_status();
  } else {
    clear_has_server_status();
  }
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.server_status)
}

// optional .floyd.Membership all_servers = 8;
bool CmdResponse::has_all_servers() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CmdResponse::set_has_all_servers() {
  _has_bits_[0] |= 0x00000080u;
}
void CmdResponse::clear_has_all_servers() {
  _has_bits_[0] &= ~0x00000080u;
}
void CmdResponse::clear_all_servers() {
  if (all_servers_ != NULL) all_servers_->::floyd::Membership::Clear();
  clear_has_all_servers();
}
const ::floyd::Membership& CmdResponse::all_servers() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.all_servers)
  return all_servers_ != NULL ? *all_servers_ : *default_instance_->all_servers_;
}
::floyd::Membership* CmdResponse::mutable_all_servers() {
  set_has_all_servers();
  if (all_servers_ == NULL) {
    all_servers_ = new ::floyd::Membership;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.all_servers)
  return all_servers_;
}
::floyd::Membership* CmdResponse::release_all_servers() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.all_servers)
  clear_has_all_servers();
  ::floyd::Membership* temp = all_servers_;
  all_servers_ = NULL;
  return temp;
}
void CmdResponse::set_allocated_all_servers(::floyd::Membership* all_servers) {
  delete all_servers_;
  all_servers_ = all_servers;
  if (all_servers) {
    set_has_all_servers();
  } else {
    clear_has_all_servers();
  }
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.all_servers)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Membership::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Membership::Membership()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:floyd.Membership)
}

void Membership::InitAsDefaultInstance() {
}

Membership::Membership(const Membership& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:floyd.Membership)
}

void Membership::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Membership::~Membership() {
  // @@protoc_insertion_point(destructor:floyd.Membership)
  SharedDtor();
}

void Membership::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Membership::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Membership::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Membership_descriptor_;
}

const Membership& Membership::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_floyd_2eproto();
  return *default_instance_;
}

Membership* Membership::default_instance_ = NULL;

Membership* Membership::New(::google::protobuf::Arena* arena) const {
  Membership* n = new Membership;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Membership::Clear() {
// @@protoc_insertion_point(message_clear_start:floyd.Membership)
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Membership::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:floyd.Membership)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes nodes = 1;
      case 1: {
        if (tag == 10) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_nodes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:floyd.Membership)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:floyd.Membership)
  return false;
#undef DO_
}

void Membership::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:floyd.Membership)
  // repeated bytes nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->nodes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:floyd.Membership)
}

::google::protobuf::uint8* Membership::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:floyd.Membership)
  // repeated bytes nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->nodes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:floyd.Membership)
  return target;
}

int Membership::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:floyd.Membership)
  int total_size = 0;

  // repeated bytes nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->nodes(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Membership::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:floyd.Membership)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Membership* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Membership>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:floyd.Membership)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:floyd.Membership)
    MergeFrom(*source);
  }
}

void Membership::MergeFrom(const Membership& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:floyd.Membership)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  nodes_.MergeFrom(from.nodes_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Membership::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:floyd.Membership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Membership::CopyFrom(const Membership& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:floyd.Membership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Membership::IsInitialized() const {

  return true;
}

void Membership::Swap(Membership* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Membership::InternalSwap(Membership* other) {
  nodes_.UnsafeArenaSwap(&other->nodes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Membership::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Membership_descriptor_;
  metadata.reflection = Membership_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Membership

// repeated bytes nodes = 1;
int Membership::nodes_size() const {
  return nodes_.size();
}
void Membership::clear_nodes() {
  nodes_.Clear();
}
 const ::std::string& Membership::nodes(int index) const {
  // @@protoc_insertion_point(field_get:floyd.Membership.nodes)
  return nodes_.Get(index);
}
 ::std::string* Membership::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:floyd.Membership.nodes)
  return nodes_.Mutable(index);
}
 void Membership::set_nodes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:floyd.Membership.nodes)
  nodes_.Mutable(index)->assign(value);
}
 void Membership::set_nodes(int index, const char* value) {
  nodes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:floyd.Membership.nodes)
}
 void Membership::set_nodes(int index, const void* value, size_t size) {
  nodes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:floyd.Membership.nodes)
}
 ::std::string* Membership::add_nodes() {
  // @@protoc_insertion_point(field_add_mutable:floyd.Membership.nodes)
  return nodes_.Add();
}
 void Membership::add_nodes(const ::std::string& value) {
  nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:floyd.Membership.nodes)
}
 void Membership::add_nodes(const char* value) {
  nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:floyd.Membership.nodes)
}
 void Membership::add_nodes(const void* value, size_t size) {
  nodes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:floyd.Membership.nodes)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Membership::nodes() const {
  // @@protoc_insertion_point(field_list:floyd.Membership.nodes)
  return nodes_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Membership::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:floyd.Membership.nodes)
  return &nodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace floyd

// @@protoc_insertion_point(global_scope)
