// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: floyd.proto

#ifndef PROTOBUF_floyd_2eproto__INCLUDED
#define PROTOBUF_floyd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace floyd {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_floyd_2eproto();
void protobuf_AssignDesc_floyd_2eproto();
void protobuf_ShutdownFile_floyd_2eproto();

class CmdResponse;
class CmdResponse_AppendEntriesResponse;
class CmdResponse_KvResponse;
class CmdResponse_RequestVoteResponse;
class CmdResponse_ServerStatus;
class Membership;

enum Type {
  kRead = 0,
  kWrite = 1,
  kDelete = 3,
  kTryLock = 5,
  kUnLock = 6,
  kAddServer = 11,
  kRemoveServer = 12,
  kGetAllServers = 13,
  kRequestVote = 8,
  kAppendEntries = 9,
  kServerStatus = 10
};
bool Type_IsValid(int value);
const Type Type_MIN = kRead;
const Type Type_MAX = kGetAllServers;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum StatusCode {
  kOk = 0,
  kNotFound = 1,
  kError = 2,
  kLocked = 3
};
bool StatusCode_IsValid(int value);
const StatusCode StatusCode_MIN = kOk;
const StatusCode StatusCode_MAX = kLocked;
const int StatusCode_ARRAYSIZE = StatusCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusCode_descriptor();
inline const ::std::string& StatusCode_Name(StatusCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusCode_descriptor(), value);
}
inline bool StatusCode_Parse(
    const ::std::string& name, StatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCode>(
    StatusCode_descriptor(), name, value);
}
// ===================================================================

class CmdResponse_RequestVoteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.CmdResponse.RequestVoteResponse) */ {
 public:
  CmdResponse_RequestVoteResponse();
  virtual ~CmdResponse_RequestVoteResponse();

  CmdResponse_RequestVoteResponse(const CmdResponse_RequestVoteResponse& from);

  inline CmdResponse_RequestVoteResponse& operator=(const CmdResponse_RequestVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_RequestVoteResponse& default_instance();

  void Swap(CmdResponse_RequestVoteResponse* other);

  // implements Message ----------------------------------------------

  inline CmdResponse_RequestVoteResponse* New() const { return New(NULL); }

  CmdResponse_RequestVoteResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse_RequestVoteResponse& from);
  void MergeFrom(const CmdResponse_RequestVoteResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CmdResponse_RequestVoteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // required bool vote_granted = 2;
  bool has_vote_granted() const;
  void clear_vote_granted();
  static const int kVoteGrantedFieldNumber = 2;
  bool vote_granted() const;
  void set_vote_granted(bool value);

  // @@protoc_insertion_point(class_scope:floyd.CmdResponse.RequestVoteResponse)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_vote_granted();
  inline void clear_has_vote_granted();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 term_;
  bool vote_granted_;
  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse_RequestVoteResponse* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse_AppendEntriesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.CmdResponse.AppendEntriesResponse) */ {
 public:
  CmdResponse_AppendEntriesResponse();
  virtual ~CmdResponse_AppendEntriesResponse();

  CmdResponse_AppendEntriesResponse(const CmdResponse_AppendEntriesResponse& from);

  inline CmdResponse_AppendEntriesResponse& operator=(const CmdResponse_AppendEntriesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_AppendEntriesResponse& default_instance();

  void Swap(CmdResponse_AppendEntriesResponse* other);

  // implements Message ----------------------------------------------

  inline CmdResponse_AppendEntriesResponse* New() const { return New(NULL); }

  CmdResponse_AppendEntriesResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse_AppendEntriesResponse& from);
  void MergeFrom(const CmdResponse_AppendEntriesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CmdResponse_AppendEntriesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // required bool success = 2;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // optional uint64 last_log_index = 3;
  bool has_last_log_index() const;
  void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 3;
  ::google::protobuf::uint64 last_log_index() const;
  void set_last_log_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:floyd.CmdResponse.AppendEntriesResponse)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_last_log_index();
  inline void clear_has_last_log_index();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 last_log_index_;
  bool success_;
  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse_AppendEntriesResponse* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse_KvResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.CmdResponse.KvResponse) */ {
 public:
  CmdResponse_KvResponse();
  virtual ~CmdResponse_KvResponse();

  CmdResponse_KvResponse(const CmdResponse_KvResponse& from);

  inline CmdResponse_KvResponse& operator=(const CmdResponse_KvResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_KvResponse& default_instance();

  void Swap(CmdResponse_KvResponse* other);

  // implements Message ----------------------------------------------

  inline CmdResponse_KvResponse* New() const { return New(NULL); }

  CmdResponse_KvResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse_KvResponse& from);
  void MergeFrom(const CmdResponse_KvResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CmdResponse_KvResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:floyd.CmdResponse.KvResponse)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse_KvResponse* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse_ServerStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.CmdResponse.ServerStatus) */ {
 public:
  CmdResponse_ServerStatus();
  virtual ~CmdResponse_ServerStatus();

  CmdResponse_ServerStatus(const CmdResponse_ServerStatus& from);

  inline CmdResponse_ServerStatus& operator=(const CmdResponse_ServerStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_ServerStatus& default_instance();

  void Swap(CmdResponse_ServerStatus* other);

  // implements Message ----------------------------------------------

  inline CmdResponse_ServerStatus* New() const { return New(NULL); }

  CmdResponse_ServerStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse_ServerStatus& from);
  void MergeFrom(const CmdResponse_ServerStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CmdResponse_ServerStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // required uint64 commit_index = 2;
  bool has_commit_index() const;
  void clear_commit_index();
  static const int kCommitIndexFieldNumber = 2;
  ::google::protobuf::uint64 commit_index() const;
  void set_commit_index(::google::protobuf::uint64 value);

  // required bytes role = 3;
  bool has_role() const;
  void clear_role();
  static const int kRoleFieldNumber = 3;
  const ::std::string& role() const;
  void set_role(const ::std::string& value);
  void set_role(const char* value);
  void set_role(const void* value, size_t size);
  ::std::string* mutable_role();
  ::std::string* release_role();
  void set_allocated_role(::std::string* role);

  // optional bytes leader_ip = 4;
  bool has_leader_ip() const;
  void clear_leader_ip();
  static const int kLeaderIpFieldNumber = 4;
  const ::std::string& leader_ip() const;
  void set_leader_ip(const ::std::string& value);
  void set_leader_ip(const char* value);
  void set_leader_ip(const void* value, size_t size);
  ::std::string* mutable_leader_ip();
  ::std::string* release_leader_ip();
  void set_allocated_leader_ip(::std::string* leader_ip);

  // optional int32 leader_port = 5;
  bool has_leader_port() const;
  void clear_leader_port();
  static const int kLeaderPortFieldNumber = 5;
  ::google::protobuf::int32 leader_port() const;
  void set_leader_port(::google::protobuf::int32 value);

  // optional bytes voted_for_ip = 6;
  bool has_voted_for_ip() const;
  void clear_voted_for_ip();
  static const int kVotedForIpFieldNumber = 6;
  const ::std::string& voted_for_ip() const;
  void set_voted_for_ip(const ::std::string& value);
  void set_voted_for_ip(const char* value);
  void set_voted_for_ip(const void* value, size_t size);
  ::std::string* mutable_voted_for_ip();
  ::std::string* release_voted_for_ip();
  void set_allocated_voted_for_ip(::std::string* voted_for_ip);

  // optional int32 voted_for_port = 7;
  bool has_voted_for_port() const;
  void clear_voted_for_port();
  static const int kVotedForPortFieldNumber = 7;
  ::google::protobuf::int32 voted_for_port() const;
  void set_voted_for_port(::google::protobuf::int32 value);

  // optional uint64 last_log_term = 8;
  bool has_last_log_term() const;
  void clear_last_log_term();
  static const int kLastLogTermFieldNumber = 8;
  ::google::protobuf::uint64 last_log_term() const;
  void set_last_log_term(::google::protobuf::uint64 value);

  // optional uint64 last_log_index = 9;
  bool has_last_log_index() const;
  void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 9;
  ::google::protobuf::uint64 last_log_index() const;
  void set_last_log_index(::google::protobuf::uint64 value);

  // optional uint64 last_applied = 10;
  bool has_last_applied() const;
  void clear_last_applied();
  static const int kLastAppliedFieldNumber = 10;
  ::google::protobuf::uint64 last_applied() const;
  void set_last_applied(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:floyd.CmdResponse.ServerStatus)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_commit_index();
  inline void clear_has_commit_index();
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_leader_ip();
  inline void clear_has_leader_ip();
  inline void set_has_leader_port();
  inline void clear_has_leader_port();
  inline void set_has_voted_for_ip();
  inline void clear_has_voted_for_ip();
  inline void set_has_voted_for_port();
  inline void clear_has_voted_for_port();
  inline void set_has_last_log_term();
  inline void clear_has_last_log_term();
  inline void set_has_last_log_index();
  inline void clear_has_last_log_index();
  inline void set_has_last_applied();
  inline void clear_has_last_applied();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 commit_index_;
  ::google::protobuf::internal::ArenaStringPtr role_;
  ::google::protobuf::internal::ArenaStringPtr leader_ip_;
  ::google::protobuf::internal::ArenaStringPtr voted_for_ip_;
  ::google::protobuf::int32 leader_port_;
  ::google::protobuf::int32 voted_for_port_;
  ::google::protobuf::uint64 last_log_term_;
  ::google::protobuf::uint64 last_log_index_;
  ::google::protobuf::uint64 last_applied_;
  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse_ServerStatus* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.CmdResponse) */ {
 public:
  CmdResponse();
  virtual ~CmdResponse();

  CmdResponse(const CmdResponse& from);

  inline CmdResponse& operator=(const CmdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse& default_instance();

  void Swap(CmdResponse* other);

  // implements Message ----------------------------------------------

  inline CmdResponse* New() const { return New(NULL); }

  CmdResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse& from);
  void MergeFrom(const CmdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CmdResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdResponse_RequestVoteResponse RequestVoteResponse;
  typedef CmdResponse_AppendEntriesResponse AppendEntriesResponse;
  typedef CmdResponse_KvResponse KvResponse;
  typedef CmdResponse_ServerStatus ServerStatus;

  // accessors -------------------------------------------------------

  // required .floyd.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::floyd::Type type() const;
  void set_type(::floyd::Type value);

  // optional .floyd.StatusCode code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  ::floyd::StatusCode code() const;
  void set_code(::floyd::StatusCode value);

  // optional .floyd.CmdResponse.RequestVoteResponse request_vote_res = 3;
  bool has_request_vote_res() const;
  void clear_request_vote_res();
  static const int kRequestVoteResFieldNumber = 3;
  const ::floyd::CmdResponse_RequestVoteResponse& request_vote_res() const;
  ::floyd::CmdResponse_RequestVoteResponse* mutable_request_vote_res();
  ::floyd::CmdResponse_RequestVoteResponse* release_request_vote_res();
  void set_allocated_request_vote_res(::floyd::CmdResponse_RequestVoteResponse* request_vote_res);

  // optional .floyd.CmdResponse.AppendEntriesResponse append_entries_res = 4;
  bool has_append_entries_res() const;
  void clear_append_entries_res();
  static const int kAppendEntriesResFieldNumber = 4;
  const ::floyd::CmdResponse_AppendEntriesResponse& append_entries_res() const;
  ::floyd::CmdResponse_AppendEntriesResponse* mutable_append_entries_res();
  ::floyd::CmdResponse_AppendEntriesResponse* release_append_entries_res();
  void set_allocated_append_entries_res(::floyd::CmdResponse_AppendEntriesResponse* append_entries_res);

  // optional bytes msg = 5;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 5;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional .floyd.CmdResponse.KvResponse kv_response = 6;
  bool has_kv_response() const;
  void clear_kv_response();
  static const int kKvResponseFieldNumber = 6;
  const ::floyd::CmdResponse_KvResponse& kv_response() const;
  ::floyd::CmdResponse_KvResponse* mutable_kv_response();
  ::floyd::CmdResponse_KvResponse* release_kv_response();
  void set_allocated_kv_response(::floyd::CmdResponse_KvResponse* kv_response);

  // optional .floyd.CmdResponse.ServerStatus server_status = 7;
  bool has_server_status() const;
  void clear_server_status();
  static const int kServerStatusFieldNumber = 7;
  const ::floyd::CmdResponse_ServerStatus& server_status() const;
  ::floyd::CmdResponse_ServerStatus* mutable_server_status();
  ::floyd::CmdResponse_ServerStatus* release_server_status();
  void set_allocated_server_status(::floyd::CmdResponse_ServerStatus* server_status);

  // optional .floyd.Membership all_servers = 8;
  bool has_all_servers() const;
  void clear_all_servers();
  static const int kAllServersFieldNumber = 8;
  const ::floyd::Membership& all_servers() const;
  ::floyd::Membership* mutable_all_servers();
  ::floyd::Membership* release_all_servers();
  void set_allocated_all_servers(::floyd::Membership* all_servers);

  // @@protoc_insertion_point(class_scope:floyd.CmdResponse)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_request_vote_res();
  inline void clear_has_request_vote_res();
  inline void set_has_append_entries_res();
  inline void clear_has_append_entries_res();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_kv_response();
  inline void clear_has_kv_response();
  inline void set_has_server_status();
  inline void clear_has_server_status();
  inline void set_has_all_servers();
  inline void clear_has_all_servers();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  int code_;
  ::floyd::CmdResponse_RequestVoteResponse* request_vote_res_;
  ::floyd::CmdResponse_AppendEntriesResponse* append_entries_res_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::floyd::CmdResponse_KvResponse* kv_response_;
  ::floyd::CmdResponse_ServerStatus* server_status_;
  ::floyd::Membership* all_servers_;
  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse* default_instance_;
};
// -------------------------------------------------------------------

class Membership : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:floyd.Membership) */ {
 public:
  Membership();
  virtual ~Membership();

  Membership(const Membership& from);

  inline Membership& operator=(const Membership& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Membership& default_instance();

  void Swap(Membership* other);

  // implements Message ----------------------------------------------

  inline Membership* New() const { return New(NULL); }

  Membership* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Membership& from);
  void MergeFrom(const Membership& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Membership* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes nodes = 1;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  const ::std::string& nodes(int index) const;
  ::std::string* mutable_nodes(int index);
  void set_nodes(int index, const ::std::string& value);
  void set_nodes(int index, const char* value);
  void set_nodes(int index, const void* value, size_t size);
  ::std::string* add_nodes();
  void add_nodes(const ::std::string& value);
  void add_nodes(const char* value);
  void add_nodes(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& nodes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nodes();

  // @@protoc_insertion_point(class_scope:floyd.Membership)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nodes_;
  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static Membership* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdResponse_RequestVoteResponse

// required uint64 term = 1;
inline bool CmdResponse_RequestVoteResponse::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_RequestVoteResponse::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_RequestVoteResponse::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_RequestVoteResponse::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 CmdResponse_RequestVoteResponse::term() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.RequestVoteResponse.term)
  return term_;
}
inline void CmdResponse_RequestVoteResponse::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.RequestVoteResponse.term)
}

// required bool vote_granted = 2;
inline bool CmdResponse_RequestVoteResponse::has_vote_granted() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdResponse_RequestVoteResponse::set_has_vote_granted() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdResponse_RequestVoteResponse::clear_has_vote_granted() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdResponse_RequestVoteResponse::clear_vote_granted() {
  vote_granted_ = false;
  clear_has_vote_granted();
}
inline bool CmdResponse_RequestVoteResponse::vote_granted() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.RequestVoteResponse.vote_granted)
  return vote_granted_;
}
inline void CmdResponse_RequestVoteResponse::set_vote_granted(bool value) {
  set_has_vote_granted();
  vote_granted_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.RequestVoteResponse.vote_granted)
}

// -------------------------------------------------------------------

// CmdResponse_AppendEntriesResponse

// required uint64 term = 1;
inline bool CmdResponse_AppendEntriesResponse::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_AppendEntriesResponse::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_AppendEntriesResponse::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_AppendEntriesResponse::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 CmdResponse_AppendEntriesResponse::term() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.AppendEntriesResponse.term)
  return term_;
}
inline void CmdResponse_AppendEntriesResponse::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.AppendEntriesResponse.term)
}

// required bool success = 2;
inline bool CmdResponse_AppendEntriesResponse::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdResponse_AppendEntriesResponse::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdResponse_AppendEntriesResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdResponse_AppendEntriesResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool CmdResponse_AppendEntriesResponse::success() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.AppendEntriesResponse.success)
  return success_;
}
inline void CmdResponse_AppendEntriesResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.AppendEntriesResponse.success)
}

// optional uint64 last_log_index = 3;
inline bool CmdResponse_AppendEntriesResponse::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdResponse_AppendEntriesResponse::set_has_last_log_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdResponse_AppendEntriesResponse::clear_has_last_log_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdResponse_AppendEntriesResponse::clear_last_log_index() {
  last_log_index_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_index();
}
inline ::google::protobuf::uint64 CmdResponse_AppendEntriesResponse::last_log_index() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.AppendEntriesResponse.last_log_index)
  return last_log_index_;
}
inline void CmdResponse_AppendEntriesResponse::set_last_log_index(::google::protobuf::uint64 value) {
  set_has_last_log_index();
  last_log_index_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.AppendEntriesResponse.last_log_index)
}

// -------------------------------------------------------------------

// CmdResponse_KvResponse

// optional bytes value = 1;
inline bool CmdResponse_KvResponse::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_KvResponse::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_KvResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_KvResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& CmdResponse_KvResponse::value() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.KvResponse.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdResponse_KvResponse::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.KvResponse.value)
}
inline void CmdResponse_KvResponse::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdResponse.KvResponse.value)
}
inline void CmdResponse_KvResponse::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdResponse.KvResponse.value)
}
inline ::std::string* CmdResponse_KvResponse::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.KvResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdResponse_KvResponse::release_value() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.KvResponse.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdResponse_KvResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.KvResponse.value)
}

// -------------------------------------------------------------------

// CmdResponse_ServerStatus

// required uint64 term = 1;
inline bool CmdResponse_ServerStatus::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_ServerStatus::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_ServerStatus::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 CmdResponse_ServerStatus::term() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.term)
  return term_;
}
inline void CmdResponse_ServerStatus::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.term)
}

// required uint64 commit_index = 2;
inline bool CmdResponse_ServerStatus::has_commit_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_commit_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdResponse_ServerStatus::clear_has_commit_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdResponse_ServerStatus::clear_commit_index() {
  commit_index_ = GOOGLE_ULONGLONG(0);
  clear_has_commit_index();
}
inline ::google::protobuf::uint64 CmdResponse_ServerStatus::commit_index() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.commit_index)
  return commit_index_;
}
inline void CmdResponse_ServerStatus::set_commit_index(::google::protobuf::uint64 value) {
  set_has_commit_index();
  commit_index_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.commit_index)
}

// required bytes role = 3;
inline bool CmdResponse_ServerStatus::has_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_role() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdResponse_ServerStatus::clear_has_role() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdResponse_ServerStatus::clear_role() {
  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_role();
}
inline const ::std::string& CmdResponse_ServerStatus::role() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.role)
  return role_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdResponse_ServerStatus::set_role(const ::std::string& value) {
  set_has_role();
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.role)
}
inline void CmdResponse_ServerStatus::set_role(const char* value) {
  set_has_role();
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdResponse.ServerStatus.role)
}
inline void CmdResponse_ServerStatus::set_role(const void* value, size_t size) {
  set_has_role();
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdResponse.ServerStatus.role)
}
inline ::std::string* CmdResponse_ServerStatus::mutable_role() {
  set_has_role();
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.ServerStatus.role)
  return role_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdResponse_ServerStatus::release_role() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.ServerStatus.role)
  clear_has_role();
  return role_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdResponse_ServerStatus::set_allocated_role(::std::string* role) {
  if (role != NULL) {
    set_has_role();
  } else {
    clear_has_role();
  }
  role_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.ServerStatus.role)
}

// optional bytes leader_ip = 4;
inline bool CmdResponse_ServerStatus::has_leader_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_leader_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdResponse_ServerStatus::clear_has_leader_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdResponse_ServerStatus::clear_leader_ip() {
  leader_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leader_ip();
}
inline const ::std::string& CmdResponse_ServerStatus::leader_ip() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.leader_ip)
  return leader_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdResponse_ServerStatus::set_leader_ip(const ::std::string& value) {
  set_has_leader_ip();
  leader_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.leader_ip)
}
inline void CmdResponse_ServerStatus::set_leader_ip(const char* value) {
  set_has_leader_ip();
  leader_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdResponse.ServerStatus.leader_ip)
}
inline void CmdResponse_ServerStatus::set_leader_ip(const void* value, size_t size) {
  set_has_leader_ip();
  leader_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdResponse.ServerStatus.leader_ip)
}
inline ::std::string* CmdResponse_ServerStatus::mutable_leader_ip() {
  set_has_leader_ip();
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.ServerStatus.leader_ip)
  return leader_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdResponse_ServerStatus::release_leader_ip() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.ServerStatus.leader_ip)
  clear_has_leader_ip();
  return leader_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdResponse_ServerStatus::set_allocated_leader_ip(::std::string* leader_ip) {
  if (leader_ip != NULL) {
    set_has_leader_ip();
  } else {
    clear_has_leader_ip();
  }
  leader_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_ip);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.ServerStatus.leader_ip)
}

// optional int32 leader_port = 5;
inline bool CmdResponse_ServerStatus::has_leader_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_leader_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdResponse_ServerStatus::clear_has_leader_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdResponse_ServerStatus::clear_leader_port() {
  leader_port_ = 0;
  clear_has_leader_port();
}
inline ::google::protobuf::int32 CmdResponse_ServerStatus::leader_port() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.leader_port)
  return leader_port_;
}
inline void CmdResponse_ServerStatus::set_leader_port(::google::protobuf::int32 value) {
  set_has_leader_port();
  leader_port_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.leader_port)
}

// optional bytes voted_for_ip = 6;
inline bool CmdResponse_ServerStatus::has_voted_for_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_voted_for_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdResponse_ServerStatus::clear_has_voted_for_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdResponse_ServerStatus::clear_voted_for_ip() {
  voted_for_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_voted_for_ip();
}
inline const ::std::string& CmdResponse_ServerStatus::voted_for_ip() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.voted_for_ip)
  return voted_for_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdResponse_ServerStatus::set_voted_for_ip(const ::std::string& value) {
  set_has_voted_for_ip();
  voted_for_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.voted_for_ip)
}
inline void CmdResponse_ServerStatus::set_voted_for_ip(const char* value) {
  set_has_voted_for_ip();
  voted_for_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdResponse.ServerStatus.voted_for_ip)
}
inline void CmdResponse_ServerStatus::set_voted_for_ip(const void* value, size_t size) {
  set_has_voted_for_ip();
  voted_for_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdResponse.ServerStatus.voted_for_ip)
}
inline ::std::string* CmdResponse_ServerStatus::mutable_voted_for_ip() {
  set_has_voted_for_ip();
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.ServerStatus.voted_for_ip)
  return voted_for_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdResponse_ServerStatus::release_voted_for_ip() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.ServerStatus.voted_for_ip)
  clear_has_voted_for_ip();
  return voted_for_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdResponse_ServerStatus::set_allocated_voted_for_ip(::std::string* voted_for_ip) {
  if (voted_for_ip != NULL) {
    set_has_voted_for_ip();
  } else {
    clear_has_voted_for_ip();
  }
  voted_for_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voted_for_ip);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.ServerStatus.voted_for_ip)
}

// optional int32 voted_for_port = 7;
inline bool CmdResponse_ServerStatus::has_voted_for_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_voted_for_port() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CmdResponse_ServerStatus::clear_has_voted_for_port() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CmdResponse_ServerStatus::clear_voted_for_port() {
  voted_for_port_ = 0;
  clear_has_voted_for_port();
}
inline ::google::protobuf::int32 CmdResponse_ServerStatus::voted_for_port() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.voted_for_port)
  return voted_for_port_;
}
inline void CmdResponse_ServerStatus::set_voted_for_port(::google::protobuf::int32 value) {
  set_has_voted_for_port();
  voted_for_port_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.voted_for_port)
}

// optional uint64 last_log_term = 8;
inline bool CmdResponse_ServerStatus::has_last_log_term() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_last_log_term() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CmdResponse_ServerStatus::clear_has_last_log_term() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CmdResponse_ServerStatus::clear_last_log_term() {
  last_log_term_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_term();
}
inline ::google::protobuf::uint64 CmdResponse_ServerStatus::last_log_term() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.last_log_term)
  return last_log_term_;
}
inline void CmdResponse_ServerStatus::set_last_log_term(::google::protobuf::uint64 value) {
  set_has_last_log_term();
  last_log_term_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.last_log_term)
}

// optional uint64 last_log_index = 9;
inline bool CmdResponse_ServerStatus::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_last_log_index() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CmdResponse_ServerStatus::clear_has_last_log_index() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CmdResponse_ServerStatus::clear_last_log_index() {
  last_log_index_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_index();
}
inline ::google::protobuf::uint64 CmdResponse_ServerStatus::last_log_index() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.last_log_index)
  return last_log_index_;
}
inline void CmdResponse_ServerStatus::set_last_log_index(::google::protobuf::uint64 value) {
  set_has_last_log_index();
  last_log_index_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.last_log_index)
}

// optional uint64 last_applied = 10;
inline bool CmdResponse_ServerStatus::has_last_applied() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_last_applied() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CmdResponse_ServerStatus::clear_has_last_applied() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CmdResponse_ServerStatus::clear_last_applied() {
  last_applied_ = GOOGLE_ULONGLONG(0);
  clear_has_last_applied();
}
inline ::google::protobuf::uint64 CmdResponse_ServerStatus::last_applied() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.ServerStatus.last_applied)
  return last_applied_;
}
inline void CmdResponse_ServerStatus::set_last_applied(::google::protobuf::uint64 value) {
  set_has_last_applied();
  last_applied_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.ServerStatus.last_applied)
}

// -------------------------------------------------------------------

// CmdResponse

// required .floyd.Type type = 1;
inline bool CmdResponse::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::floyd::Type CmdResponse::type() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.type)
  return static_cast< ::floyd::Type >(type_);
}
inline void CmdResponse::set_type(::floyd::Type value) {
  assert(::floyd::Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.type)
}

// optional .floyd.StatusCode code = 2;
inline bool CmdResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::floyd::StatusCode CmdResponse::code() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.code)
  return static_cast< ::floyd::StatusCode >(code_);
}
inline void CmdResponse::set_code(::floyd::StatusCode value) {
  assert(::floyd::StatusCode_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.code)
}

// optional .floyd.CmdResponse.RequestVoteResponse request_vote_res = 3;
inline bool CmdResponse::has_request_vote_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdResponse::set_has_request_vote_res() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdResponse::clear_has_request_vote_res() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdResponse::clear_request_vote_res() {
  if (request_vote_res_ != NULL) request_vote_res_->::floyd::CmdResponse_RequestVoteResponse::Clear();
  clear_has_request_vote_res();
}
inline const ::floyd::CmdResponse_RequestVoteResponse& CmdResponse::request_vote_res() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.request_vote_res)
  return request_vote_res_ != NULL ? *request_vote_res_ : *default_instance_->request_vote_res_;
}
inline ::floyd::CmdResponse_RequestVoteResponse* CmdResponse::mutable_request_vote_res() {
  set_has_request_vote_res();
  if (request_vote_res_ == NULL) {
    request_vote_res_ = new ::floyd::CmdResponse_RequestVoteResponse;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.request_vote_res)
  return request_vote_res_;
}
inline ::floyd::CmdResponse_RequestVoteResponse* CmdResponse::release_request_vote_res() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.request_vote_res)
  clear_has_request_vote_res();
  ::floyd::CmdResponse_RequestVoteResponse* temp = request_vote_res_;
  request_vote_res_ = NULL;
  return temp;
}
inline void CmdResponse::set_allocated_request_vote_res(::floyd::CmdResponse_RequestVoteResponse* request_vote_res) {
  delete request_vote_res_;
  request_vote_res_ = request_vote_res;
  if (request_vote_res) {
    set_has_request_vote_res();
  } else {
    clear_has_request_vote_res();
  }
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.request_vote_res)
}

// optional .floyd.CmdResponse.AppendEntriesResponse append_entries_res = 4;
inline bool CmdResponse::has_append_entries_res() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdResponse::set_has_append_entries_res() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdResponse::clear_has_append_entries_res() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdResponse::clear_append_entries_res() {
  if (append_entries_res_ != NULL) append_entries_res_->::floyd::CmdResponse_AppendEntriesResponse::Clear();
  clear_has_append_entries_res();
}
inline const ::floyd::CmdResponse_AppendEntriesResponse& CmdResponse::append_entries_res() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.append_entries_res)
  return append_entries_res_ != NULL ? *append_entries_res_ : *default_instance_->append_entries_res_;
}
inline ::floyd::CmdResponse_AppendEntriesResponse* CmdResponse::mutable_append_entries_res() {
  set_has_append_entries_res();
  if (append_entries_res_ == NULL) {
    append_entries_res_ = new ::floyd::CmdResponse_AppendEntriesResponse;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.append_entries_res)
  return append_entries_res_;
}
inline ::floyd::CmdResponse_AppendEntriesResponse* CmdResponse::release_append_entries_res() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.append_entries_res)
  clear_has_append_entries_res();
  ::floyd::CmdResponse_AppendEntriesResponse* temp = append_entries_res_;
  append_entries_res_ = NULL;
  return temp;
}
inline void CmdResponse::set_allocated_append_entries_res(::floyd::CmdResponse_AppendEntriesResponse* append_entries_res) {
  delete append_entries_res_;
  append_entries_res_ = append_entries_res;
  if (append_entries_res) {
    set_has_append_entries_res();
  } else {
    clear_has_append_entries_res();
  }
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.append_entries_res)
}

// optional bytes msg = 5;
inline bool CmdResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& CmdResponse::msg() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:floyd.CmdResponse.msg)
}
inline void CmdResponse::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:floyd.CmdResponse.msg)
}
inline void CmdResponse::set_msg(const void* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:floyd.CmdResponse.msg)
}
inline ::std::string* CmdResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdResponse::release_msg() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.msg)
}

// optional .floyd.CmdResponse.KvResponse kv_response = 6;
inline bool CmdResponse::has_kv_response() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdResponse::set_has_kv_response() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdResponse::clear_has_kv_response() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdResponse::clear_kv_response() {
  if (kv_response_ != NULL) kv_response_->::floyd::CmdResponse_KvResponse::Clear();
  clear_has_kv_response();
}
inline const ::floyd::CmdResponse_KvResponse& CmdResponse::kv_response() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.kv_response)
  return kv_response_ != NULL ? *kv_response_ : *default_instance_->kv_response_;
}
inline ::floyd::CmdResponse_KvResponse* CmdResponse::mutable_kv_response() {
  set_has_kv_response();
  if (kv_response_ == NULL) {
    kv_response_ = new ::floyd::CmdResponse_KvResponse;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.kv_response)
  return kv_response_;
}
inline ::floyd::CmdResponse_KvResponse* CmdResponse::release_kv_response() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.kv_response)
  clear_has_kv_response();
  ::floyd::CmdResponse_KvResponse* temp = kv_response_;
  kv_response_ = NULL;
  return temp;
}
inline void CmdResponse::set_allocated_kv_response(::floyd::CmdResponse_KvResponse* kv_response) {
  delete kv_response_;
  kv_response_ = kv_response;
  if (kv_response) {
    set_has_kv_response();
  } else {
    clear_has_kv_response();
  }
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.kv_response)
}

// optional .floyd.CmdResponse.ServerStatus server_status = 7;
inline bool CmdResponse::has_server_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CmdResponse::set_has_server_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CmdResponse::clear_has_server_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CmdResponse::clear_server_status() {
  if (server_status_ != NULL) server_status_->::floyd::CmdResponse_ServerStatus::Clear();
  clear_has_server_status();
}
inline const ::floyd::CmdResponse_ServerStatus& CmdResponse::server_status() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.server_status)
  return server_status_ != NULL ? *server_status_ : *default_instance_->server_status_;
}
inline ::floyd::CmdResponse_ServerStatus* CmdResponse::mutable_server_status() {
  set_has_server_status();
  if (server_status_ == NULL) {
    server_status_ = new ::floyd::CmdResponse_ServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.server_status)
  return server_status_;
}
inline ::floyd::CmdResponse_ServerStatus* CmdResponse::release_server_status() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.server_status)
  clear_has_server_status();
  ::floyd::CmdResponse_ServerStatus* temp = server_status_;
  server_status_ = NULL;
  return temp;
}
inline void CmdResponse::set_allocated_server_status(::floyd::CmdResponse_ServerStatus* server_status) {
  delete server_status_;
  server_status_ = server_status;
  if (server_status) {
    set_has_server_status();
  } else {
    clear_has_server_status();
  }
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.server_status)
}

// optional .floyd.Membership all_servers = 8;
inline bool CmdResponse::has_all_servers() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CmdResponse::set_has_all_servers() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CmdResponse::clear_has_all_servers() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CmdResponse::clear_all_servers() {
  if (all_servers_ != NULL) all_servers_->::floyd::Membership::Clear();
  clear_has_all_servers();
}
inline const ::floyd::Membership& CmdResponse::all_servers() const {
  // @@protoc_insertion_point(field_get:floyd.CmdResponse.all_servers)
  return all_servers_ != NULL ? *all_servers_ : *default_instance_->all_servers_;
}
inline ::floyd::Membership* CmdResponse::mutable_all_servers() {
  set_has_all_servers();
  if (all_servers_ == NULL) {
    all_servers_ = new ::floyd::Membership;
  }
  // @@protoc_insertion_point(field_mutable:floyd.CmdResponse.all_servers)
  return all_servers_;
}
inline ::floyd::Membership* CmdResponse::release_all_servers() {
  // @@protoc_insertion_point(field_release:floyd.CmdResponse.all_servers)
  clear_has_all_servers();
  ::floyd::Membership* temp = all_servers_;
  all_servers_ = NULL;
  return temp;
}
inline void CmdResponse::set_allocated_all_servers(::floyd::Membership* all_servers) {
  delete all_servers_;
  all_servers_ = all_servers;
  if (all_servers) {
    set_has_all_servers();
  } else {
    clear_has_all_servers();
  }
  // @@protoc_insertion_point(field_set_allocated:floyd.CmdResponse.all_servers)
}

// -------------------------------------------------------------------

// Membership

// repeated bytes nodes = 1;
inline int Membership::nodes_size() const {
  return nodes_.size();
}
inline void Membership::clear_nodes() {
  nodes_.Clear();
}
inline const ::std::string& Membership::nodes(int index) const {
  // @@protoc_insertion_point(field_get:floyd.Membership.nodes)
  return nodes_.Get(index);
}
inline ::std::string* Membership::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:floyd.Membership.nodes)
  return nodes_.Mutable(index);
}
inline void Membership::set_nodes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:floyd.Membership.nodes)
  nodes_.Mutable(index)->assign(value);
}
inline void Membership::set_nodes(int index, const char* value) {
  nodes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:floyd.Membership.nodes)
}
inline void Membership::set_nodes(int index, const void* value, size_t size) {
  nodes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:floyd.Membership.nodes)
}
inline ::std::string* Membership::add_nodes() {
  // @@protoc_insertion_point(field_add_mutable:floyd.Membership.nodes)
  return nodes_.Add();
}
inline void Membership::add_nodes(const ::std::string& value) {
  nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:floyd.Membership.nodes)
}
inline void Membership::add_nodes(const char* value) {
  nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:floyd.Membership.nodes)
}
inline void Membership::add_nodes(const void* value, size_t size) {
  nodes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:floyd.Membership.nodes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Membership::nodes() const {
  // @@protoc_insertion_point(field_list:floyd.Membership.nodes)
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Membership::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:floyd.Membership.nodes)
  return &nodes_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace floyd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::floyd::Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::floyd::Type>() {
  return ::floyd::Type_descriptor();
}
template <> struct is_proto_enum< ::floyd::StatusCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::floyd::StatusCode>() {
  return ::floyd::StatusCode_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_floyd_2eproto__INCLUDED
